name: Secure Build & Deploy Flask App to ECR

on:
  push:
    branches: [ "main" ]

jobs:
  secure-deploy:
    name: CI/CD with Security Scanning
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-south-1
      ECR_REPOSITORY: flask-todo-app
      IMAGE_TAG: latest
      APP_DIR: ./microservices/app

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # ‚úÖ Configure AWS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # üîç Gitleaks - Secret Scan
    - name: Gitleaks Scan
      uses: gitleaks/gitleaks-action@v2
      continue-on-error: true

    # üß™ Bandit - Python Security
    - name: Bandit Scan
      run: |
        pip install bandit
        bandit -r $APP_DIR || true

    # üõ°Ô∏è Checkov - IaC Scan
    - name: Checkov Scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform,kubernetes
        quiet: true
        soft_fail: true

    # üìÑ KubeLinter - K8s YAML Linting
    - name: Run KubeLinter
      run: |
        curl -sL https://github.com/stackrox/kube-linter/releases/latest/download/kube-linter-linux.tar.gz | tar xz
        sudo mv kube-linter /usr/local/bin/
        kube-linter lint k8s/ || true

    # üê≥ Build Docker Image
    - name: Build Docker Image
      run: docker build -t ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} ${{ env.APP_DIR }}

    # üîê Log in to ECR
    - name: Amazon ECR Login
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # üè∑Ô∏è Tag Docker Image (for ECR)
    - name: Tag Docker Image
      run: |
        docker tag ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} \
        ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

    # ‚úÖ Trivy Image Scan (AFTER tagging)
    - name: Trivy Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true

    # üì§ Push Docker Image to ECR
    - name: Push to ECR
      run: |
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

    # üåê Optional: OWASP ZAP DAST Scan (requires live endpoint)
    - name: OWASP ZAP Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: "http://myapp.123456.elb.amazonaws.com.nip.io"  # Replace with your Ingress URL
        fail_action: false
        cmd_options: "-a"
      continue-on-error: true



